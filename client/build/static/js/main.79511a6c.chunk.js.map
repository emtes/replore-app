{"version":3,"sources":["components/Header.jsx","components/Landing.jsx","components/RepoCard.jsx","components/RepoSearchForm.jsx","components/ExploreRepositories.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["Header","Navbar","bg","variant","sticky","expand","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","Landing","Jumbotron","className","Button","Card","border","Body","Title","Text","RepoCard","repo","date","homepageURL","languages","name","description","organization","permissions","repositoryURL","tags","vcs","agency","score","Date","lastModified","toDateString","created","Subtitle","map","l","i","key","t","website","Footer","licenses","RepoSearchForm","props","state","keywordsInput","languageInput","sortInput","fetchedLanguages","handleLangChange","bind","handleKeywordChange","handleDateSortChange","handleSubmit","fetch","then","res","json","data","results","setState","e","text","target","value","replace","this","language","sortBy","preventDefault","setLanguage","setKeywords","setDateSort","Form","onSubmit","Row","Group","as","Col","controlId","Label","Control","placeholder","onChange","toUpperCase","concat","substr","type","onClick","handleClearSearch","Component","ReposList","filteredRepos","CardColumns","ExploreRepositories","useState","repos","setRepos","setFilteredRepos","keywords","dateSort","getRepos","a","status","useEffect","keyWordArr","split","w","trim","newFilteredRepos","filter","length","includes","sort","b","aDate","Container","Spinner","animation","role","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.79511a6c.chunk.js","sourcesContent":["import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\n\nfunction Header() {\n  return (\n    <Navbar bg=\"dark\" variant=\"dark\" sticky=\"top\" expand=\"sm\">\n      <Navbar.Brand href=\"/\">Replore</Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n      <Navbar.Collapse>\n        <Nav>\n          <Nav.Link href=\"/\">Home</Nav.Link>\n          <Nav.Link href=\"/repos\">Repositories</Nav.Link>\n          <Nav.Link href=\"https://github.com/emtes/unit-8-project\">GitHub</Nav.Link>\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\n\nfunction Landing() {\n  return (\n    <>\n      <Jumbotron>\n        <h1 className=\"text-center\">Replore</h1>\n        <p className=\"text-center\">\n          Replore is an application for you to\n          {' '}\n          <strong>explore</strong>\n          {' '}\n          federal\n          {' '}\n          <strong>repositories</strong>\n          .\n        </p>\n        <p className=\"text-center\">\n          <Button variant=\"primary\" href=\"/repos\">\n            See repositories\n          </Button>\n        </p>\n      </Jumbotron>\n\n      <Card border=\"light\">\n        <Card.Body>\n          <Card.Title className=\"text-center\">Discover</Card.Title>\n          <Card.Text className=\"text-center\">\n            Discover hundreds of repositories index by\n            {' '}\n            <a href=\"https://www.code.gov/\">Code.gov</a>\n            .\n            Browse these easy to consume cards providing you with ample information about each\n            project\n          </Card.Text>\n        </Card.Body>\n      </Card>\n\n      <Card border=\"light\">\n        <Card.Body>\n          <Card.Title className=\"text-center\">Contribute</Card.Title>\n          <Card.Text className=\"text-center\">\n            Interested in contributing to an open-source project? Find projects by searching for\n            programming language and tags. Sort them by the date they were created or when they were\n            last modified.\n          </Card.Text>\n        </Card.Body>\n      </Card>\n\n      <Card border=\"light\">\n        <Card.Body>\n          <Card.Title className=\"text-center\">Learn</Card.Title>\n          <Card.Text className=\"text-center\">\n            Learn about America's open source. Gain awareness of the projects helping different\n            government agencies serve the public.\n          </Card.Text>\n        </Card.Body>\n      </Card>\n    </>\n  );\n}\n\nexport default Landing;\n","import React from 'react';\nimport Card from 'react-bootstrap/Card';\n\nfunction RepoCard({ repo }) {\n  const {\n    date,\n    homepageURL,\n    languages,\n    name,\n    description,\n    organization,\n    permissions,\n    repositoryURL,\n    tags,\n    vcs,\n    agency,\n    score,\n  } = repo;\n\n  return (\n    <Card>\n      <Card.Header>\n        <Card.Text>\n          <small className=\"text-muted\">\n            <strong>Score: </strong>\n            {score}\n          </small>\n          <br />\n          <small className=\"text-muted\">\n            <strong>Last Modified: </strong>\n            {new Date(date.lastModified).toDateString()}\n          </small>\n          <br />\n          <small className=\"text-muted\">\n            <strong>Created: </strong>\n            {new Date(date.created).toDateString()}\n          </small>\n        </Card.Text>\n      </Card.Header>\n\n      <Card.Body>\n        <Card.Title className=\"text-center\">\n          <code>{name}</code>\n        </Card.Title>\n        <Card.Subtitle className=\"text-center\">{organization}</Card.Subtitle>\n        <Card.Text>\n          <br />\n          <strong className=\"text-muted\">About</strong>\n          <br />\n          {description}\n        </Card.Text>\n\n        {languages ? (\n          <section>\n            <strong className=\"text-muted\">Languages</strong>\n            <br />\n            <ul>\n              {languages.map((l, i) => (\n                <li key={l + i}>{l}</li>\n              ))}\n            </ul>\n          </section>\n        ) : (\n          ''\n        )}\n\n        {tags ? (\n          <section>\n            <strong className=\"text-muted\">Tags</strong>\n            <br />\n            <ul>\n              {tags.map((t, i) => (\n                <li key={t + i}>{t}</li>\n              ))}\n            </ul>\n          </section>\n        ) : (\n          ''\n        )}\n\n        <Card.Link href={repositoryURL}>Repository</Card.Link>\n        {homepageURL ? <Card.Link href={homepageURL}>Homepage</Card.Link> : ''}\n        {agency ? <Card.Link href={agency.website}>{agency.name}</Card.Link> : ''}\n      </Card.Body>\n\n      <Card.Footer>\n        <Card.Text>\n          <small className=\"text-muted\">\n            <strong>VCS: </strong>\n            {vcs}\n          </small>\n          <br />\n          {permissions.licenses ? (\n            <small className=\"text-muted\">\n              <strong>License: </strong>\n              {permissions.licenses[0].name}\n            </small>\n          ) : (\n            ''\n          )}\n        </Card.Text>\n      </Card.Footer>\n    </Card>\n  );\n}\n\nexport default RepoCard;\n","import React, { Component } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\n\nclass RepoSearchForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      keywordsInput: '',\n      languageInput: '',\n      sortInput: '',\n      fetchedLanguages: [],\n    };\n\n    this.handleLangChange = this.handleLangChange.bind(this);\n    this.handleKeywordChange = this.handleKeywordChange.bind(this);\n    this.handleDateSortChange = this.handleDateSortChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    fetch('/fed-languages')\n      .then((res) => res.json())\n      .then((data) => {\n        const { results } = data;\n        this.setState({ fetchedLanguages: results });\n      });\n  }\n\n  handleKeywordChange(e) {\n    let text = e.target.value;\n    // I know, I don't like it either\n    text = text.replace(/[!@#$%^&*()[\\]\\-_+=;:]/g, '');\n    this.setState({ keywordsInput: text });\n  }\n\n  handleLangChange(e) {\n    const language = e.target.value;\n    this.setState({ languageInput: language });\n  }\n\n  handleDateSortChange(e) {\n    const sortBy = e.target.value;\n    this.setState({ sortInput: sortBy });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    this.setState({ keywordsInput: '', languageInput: '', sortInput: '' });\n    this.props.setLanguage(this.state.languageInput);\n    this.props.setKeywords(this.state.keywordsInput);\n    this.props.setDateSort(this.state.sortInput);\n  }\n\n  render() {\n    return (\n      <Form onSubmit={this.handleSubmit}>\n        <Form.Row>\n          <Form.Group as={Col} controlId=\"searchKeywords\">\n            <Form.Label>Keywords</Form.Label>\n            <Form.Control\n              placeholder=\"spending, github, API\"\n              onChange={this.handleKeywordChange}\n              value={this.state.keywordsInput}\n            />\n          </Form.Group>\n\n          <Form.Group as={Col} controlId=\"searchLanguage\">\n            <Form.Label>Language</Form.Label>\n            <Form.Control\n              as=\"select\"\n              value={this.state.languageInput}\n              onChange={this.handleLangChange}\n            >\n              <option value=\"\">Any</option>\n              {this.state.fetchedLanguages.map((l, i) => (\n                <option key={l + i} value={l}>\n                  {l[0].toUpperCase().concat(l.substr(1))}\n                </option>\n              ))}\n            </Form.Control>\n          </Form.Group>\n\n          <Form.Group as={Col} controlId=\"searchDates\">\n            <Form.Label>Sort By Dates</Form.Label>\n            <Form.Control\n              as=\"select\"\n              onChange={this.handleDateSortChange}\n              value={this.state.sortInput}\n            >\n              <option value=\"\">None</option>\n              <option value=\"modified\">Last modified</option>\n              <option value=\"created\">Last created</option>\n            </Form.Control>\n          </Form.Group>\n        </Form.Row>\n        <Button variant=\"primary\" type=\"submit\">\n          Search\n        </Button>\n        {' '}\n        <Button variant=\"secondary\" type=\"submit\" onClick={this.props.handleClearSearch}>\n          Clear Search\n        </Button>\n      </Form>\n    );\n  }\n}\n\nexport default RepoSearchForm;\n","import React, { useState, useEffect } from 'react';\nimport CardColumns from 'react-bootstrap/CardColumns';\nimport Spinner from 'react-bootstrap/Spinner';\nimport Container from 'react-bootstrap/Container';\nimport RepoCard from './RepoCard';\nimport RepoSearchForm from './RepoSearchForm';\n\nconst ReposList = ({ filteredRepos }) => (\n  <CardColumns>\n    {filteredRepos.map((repo, i) => (\n      <RepoCard key={repo.name + i} repo={repo} />\n    ))}\n  </CardColumns>\n);\n\nfunction ExploreRepositories() {\n  const [repos, setRepos] = useState([]);\n  const [filteredRepos, setFilteredRepos] = useState([]);\n  const [keywords, setKeywords] = useState('');\n  const [language, setLanguage] = useState('');\n  const [dateSort, setDateSort] = useState('');\n\n  const getRepos = async () => {\n    const res = await fetch('/fed-repos');\n    if (res.status === 200) {\n      const { results } = await res.json();\n      setRepos([...results]);\n      setFilteredRepos([...results]);\n    }\n  };\n\n  useEffect(() => {\n    getRepos();\n  }, []);\n\n  // test\n  useEffect(() => {\n    if (keywords) {\n      const keyWordArr = keywords.split(',').map((w) => w.trim());\n      const newFilteredRepos = filteredRepos.filter((repo) => {\n        for (let i = 0; i < keyWordArr.length; i += 1) {\n          if (repo.tags) {\n            if (repo.tags.includes(keyWordArr[i])) return true;\n          }\n        }\n        return false;\n      });\n      setFilteredRepos(newFilteredRepos);\n      setKeywords('');\n      setLanguage('');\n      setDateSort('');\n    }\n  }, [keywords, filteredRepos, setFilteredRepos]);\n\n  // test\n  useEffect(() => {\n    if (language) {\n      const newFilteredRepos = filteredRepos.filter((repo) => {\n        if (repo.languages) {\n          return repo.languages.includes(language);\n        }\n        return false;\n      });\n      setFilteredRepos(newFilteredRepos);\n      setKeywords('');\n      setLanguage('');\n      setDateSort('');\n    }\n  }, [language, filteredRepos, setFilteredRepos]);\n\n  // test\n  useEffect(() => {\n    if (dateSort === 'created') {\n      const newFilteredRepos = filteredRepos.sort((a, b) => {\n        const aDate = new Date(a.date.created);\n        const bDate = new Date(b.date.created);\n        return bDate - aDate;\n      });\n      setFilteredRepos(newFilteredRepos);\n      setKeywords('');\n      setLanguage('');\n      setDateSort('');\n    }\n\n    if (dateSort === 'modified') {\n      const newFilteredRepos = filteredRepos.sort((a, b) => {\n        const aDate = new Date(a.date.lastModified);\n        const bDate = new Date(b.date.lastModified);\n        return bDate - aDate;\n      });\n      setFilteredRepos(newFilteredRepos);\n      setKeywords('');\n      setLanguage('');\n      setDateSort('');\n    }\n  }, [dateSort, filteredRepos]);\n\n  function clearSearch() {\n    setKeywords('');\n    setLanguage('');\n    setDateSort('');\n    setFilteredRepos(repos);\n  }\n\n  return (\n    <Container>\n      <br />\n      <RepoSearchForm\n        language={language}\n        setLanguage={setLanguage}\n        keywords={keywords}\n        setKeywords={setKeywords}\n        dateSort={dateSort}\n        setDateSort={setDateSort}\n        handleClearSearch={clearSearch}\n      />\n      <br />\n      {repos.length ? (\n        <>\n          <p>\n            <strong>Now Seeing: </strong>\n            {filteredRepos.length}\n          </p>\n          <ReposList filteredRepos={filteredRepos} />\n        </>\n      ) : (\n        <>\n          <Spinner animation=\"border\" role=\"status\" />\n          <p>Loading...</p>\n        </>\n      )}\n    </Container>\n  );\n}\n\nexport default ExploreRepositories;\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Header from './components/Header';\nimport Landing from './components/Landing';\nimport ExploreRepositories from './components/ExploreRepositories';\n\nfunction App() {\n  return (\n    <Router>\n      <Header />\n      <Switch>\n        <Route exact path=\"/\">\n          <Landing />\n        </Route>\n        <Route path=\"/repos\">\n          <ExploreRepositories />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}